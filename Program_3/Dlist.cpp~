#include <cassert>
#include <new>
#include <iostream>
#include <cstdlib>

using namespace std;

#include "DList.h"

//--- Definition of class constructor
List::List(int maxSize)
: mySize(0), myCapacity(maxSize)
{
   myArray = new(nothrow) ElementType[maxSize];
   assert(myArray != 0);
}

//--- Definition of class destructor
List::~List()
{
   delete [] myArray;
}

//--- Definition of copy constructor
List::List(const List &origList)
: mySize(origList.mySize), myCapacity(origList.myCapacity)
{
  //--- Get new array for copy
   myArray = new(nothrow) ElementType[myCapacity];

   if (myArray != 0)                 // check if memory available
      //--- Copy origList's elements into this new array
      for(int i = 0; i < mySize; i++)
         myArray[i] = origList.myArray[i];

   else
   {
      cerr << "*** Inadequate memory to allocate storage for list ***\n";
      exit(1);
   }
}

List::List(int newCapacity, const List & origList )
: mySize(origList.mySize), myCapacity(newCapacity)
{ 
   //--- Get new array for copy  
   myArray = new(nothrow) ElementType[myCapacity];

   if (myArray != 0) {                // check if memory available
      //--- Copy origList's elements into this new array
      for(int i = 0; i < mySize; i++)
         myArray[i] = origList.myArray[i];
         delete [] origList.myArray;
    }
   else
   {
      cerr << "*** Inadequate memory to allocate storage for list ***\n";
      exit(1);
   }
}


//--- Definition of assignment operator
const List & List::operator=(const List & rightHandSide)
{
   if (this != &rightHandSide)  // check that not self-assignment
   {
      //-- Allocate a new array if necessary
      if (myCapacity != rightHandSide.myCapacity) 
      {
         delete[] myArray;
         myCapacity = rightHandSide.myCapacity;
         myArray = new(nothrow) ElementType[myCapacity];

         if (myArray == 0)      // check if memory available
         {
            cerr << "*Inadequate memory to allocate stack ***\n";
            //exit(1);
         }
      }
      //--- Copy rightHandSide's list elements into this new array
      mySize = rightHandSide.mySize;
      for(int i = 0; i < mySize; i++)
         myArray[i] = rightHandSide.myArray[i];
   }
   return *this;
}

int List::getSize() const
{
    cout << endl << "The size of this list is: "
         << mySize;
}

int List::getCapacity( ) const
{
    cout << endl << "The maximum capacity of this array is: "
         << myCapacity;
}

void List::setCapacity(  int newCapacity )
{
    if (newCapacity < mySize)
        newCapacity = mySize;
    if (newCapacity == myCapacity)
        return;
    List newlist(newCapacity );
    if (newlist.myArray != 0)  {               // check if memory available
        //--- Copy origList's elements into this new array
        for(int i = 0; i < newlist.mySize; i++)
            newlist.myArray[i] = myArray[i];
        newlist.mySize = mySize;
        delete[] myArray;
        myCapacity = newlist.myCapacity;
        myArray = new(nothrow) ElementType[myCapacity];
    //--- Copy rightHandSide's list elements into this new array
        mySize = newlist.mySize;
        for(int i = 0; i < mySize; i++)
            myArray[i] =newlist.myArray[i];
        delete [] newlist.myArray;
    }
   
}




void List::addrandint( int num_ofints ){
    int maxcapacity = myCapacity - mySize;
    if (num_ofints > maxcapacity){
        cerr << "*Inadequate memory to allocate stack ***\n";
        exit(1);
    }
    if(num_ofints <= maxcapacity){
        int num_ofiters = num_ofints + mySize;
            for (int i = mySize; i <= num_ofiters; i++){
                int n = 998;
                myArray[i] = rand() % n + 1;
       
            }
            mySize = mySize + num_ofints;
        }
        /*else if(mySize == 0){
            for (int i = mySize; i < num_ofiters; i++){
                int n = 998;
                myArray[i] = rand() % n + 1;
                mySize = mySize + (num_ofints - 1);
            }
        }*/
    
}
//--- Definition of empty()
bool List::empty() const
{
   if (mySize == 0)
       return 0;
   else if (mySize != 0)
       return 1;
}

//--- Definition of display()
void List::display(ostream & out) const
{
   for (int i = 0; i < mySize; i++)
     out << myArray[i] << "  ";
}

//--- Definition of output operator
ostream & operator<< (ostream & out, const List & aList)
{
   aList.display(out);
   return out;
}

//--- Definition of insert()
void List::insert(ElementType item, int pos)
{
   if (mySize == myCapacity)
   {
       int newCapacity = 2 * myCapacity;
       setCapacity( newCapacity );
   }


   // First shift array elements right to make room for item

   for(int i = mySize; i > pos; i--)
      myArray[i] = myArray[i - 1];

   // Now insert item at position pos and increase list size  
   myArray[pos] = item;
   mySize++;
}

//--- Definition of erase()
void List::erase(int pos)
{
   if (mySize == 0)
   {
      cerr << "*** List is empty ***\n";
      return;
   }
  if (pos < 0 || pos >= mySize)
   {
      cerr << "Illegal location to delete -- " << pos
           << ".  List unchanged. ***\n";
      return;
   }

   // Shift array elements left to close the gap
   for(int i = pos; i < mySize; i++)
       myArray[i] = myArray[i + 1];

   // Decrease list size
    mySize--;
}

