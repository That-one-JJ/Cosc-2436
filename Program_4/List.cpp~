#include <iostream>
#include <cstdlib>
#include <string>
#include "List.h"
using namespace std;

List::List(){
    //default constructor
    mySize = 0;
    first = NULL;
}

List::List( const List &source )
: mySize(source.mySize)
{
    Node * n = new Node();

    n = source.first;
    Node * v = new Node(n->data);
    first = v;
    Node * tmp = new Node();
    while (v->next == NULL && n->next != NULL ) {
        n = n->next;
        v->data = n->data;

        tmp = first;
        while (tmp->next != NULL) {
            tmp = tmp->next;
            }
        tmp->next = v;
      }
}


List::~List(){
    Node * f = new Node();
    f = first;
    Node * current =  new Node(f->data);

    while (current != NULL)
    {
        Node * delval = new Node();
        delval = current;
        current = f->next;    
        delete(delval);
    }
    delete(current);
    delete(first);
}

const List & List::operator=(const List & rightside ){
    if (this != &rightside)  // check that not self-assignment
    {
    mySize = rightside.mySize;
    Node * n = new Node();

    n = rightside.first;
    Node * v = new Node(n->data);
    first = v;
    Node * tmp = new Node();
    while (v->next == NULL && n->next != NULL ) {
        n = n->next;
        v->data = n->data;

        tmp = first;
        while (tmp->next != NULL) {
            tmp = tmp->next;
            }
        tmp->next = v;
      }
    }
}
int List::getSize() const{
    return mySize;
}

bool List::empty( ) const{
    if (mySize != 0)
        return 0;
    else
        return 1;
}

void List::insert(ElementType dataVal, int index ){
    if (0 <=index, index <= mySize, mySize > 0){
        Node * newNode = new Node(dataVal);
        Node * prev = new Node();
        Node * curr = new Node();
        curr = first;
        for( int i = 0; i < index; i ++){
            prev = curr;
            curr = curr->next;
            }
        prev->next = newNode;
        newNode->next = curr;
        mySize += 1;
    }
    else if (0 <=index, index <= mySize, mySize == 0){
        Node * newNode = new Node(dataVal);
        first = newNode;
        mySize += 1;
    }
}

void List::erase(int index){
    if (0 <=index, index <= mySize){
        Node * prev = new Node();
        Node * curr = new Node();
        Node * delval = new Node();
        curr = first;
        for( int i = 0; i < index; i ++){
            prev = curr;
            curr = curr->next;
            }
        delval = curr;
        curr = curr->next;
        delete delval;
        prev->next = curr;
        mySize -= 1;
    }
}    

void List::display(ostream & out) const
{
    Node * curr = new Node();
    curr = first;
    for (int i = 0; i < mySize; i++){
      out << curr->data << "  ";
      curr = curr->next;
    }
}

//--- Definition of output operator
ostream & operator<< (ostream & out, const List & aList)
{
   aList.display(out);
   return out;
}

int List::find( ElementType value) const{
    int index = 0;
    ElementType rvalue;
    while(value != rvalue){
        Node * n = new Node();
        n = this->first;
        rvalue = n->data;
        n = n->next;
        index += 1;
    }
    cout <<  endl << "The first occurence of value " << value 
        << " is at index position " << index;

}




